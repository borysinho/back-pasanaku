generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EstadoJuego {
  Nuevo
  Iniciado
  Finalizado
}

enum Moneda {
  BS
  US
}

model Juegos {
  id Int @id @default(autoincrement())

  estado_juego EstadoJuego @default(Nuevo)
  moneda       Moneda      @default(BS)

  nombre         String
  fecha_inicio   DateTime @db.Date
  monto_total    Int
  cant_jugadores Int      @default(0)

  lapso_turnos_dias Int @default(30)

  jugadores_juegos Jugadores_Juegos[]
  invitados_juegos Invitados_Juegos[]
  turnos           Turnos[]
}

model Invitados {
  id               Int                @id @default(autoincrement())
  correo           String             @unique
  telf             String             @unique
  invitados_juegos Invitados_Juegos[]
  jugadores        Jugadores[]
}

enum EstadoNotificacion {
  EnvioCorrecto
  EnvioIncorrecto
}

enum EstadoInvitacion {
  Pendiente
  Aceptado
  Rechazado
  Cancelado
}

model Invitados_Juegos {
  id_invitado Int
  id_juego    Int

  invitado Invitados @relation(fields: [id_invitado], references: [id], onDelete: Cascade)
  juego    Juegos    @relation(fields: [id_juego], references: [id], onDelete: Cascade)

  estado_invitacion            EstadoInvitacion   @default(Pendiente)
  estado_notificacion_whatsapp EstadoNotificacion @default(EnvioIncorrecto)
  estado_notificacion_correo   EstadoNotificacion @default(EnvioIncorrecto)
  nombre_invitado              String
  periodo                      String             @default("Mensual")
  fecha                        DateTime?          @default(now())

  @@id(name: "id", fields: [id_invitado, id_juego])
}

enum EstadoTurnos {
  Pasado
  TiempoOfertas
  TiempoPagos
}

model Turnos {
  id Int @id @default(autoincrement())

  juego                 Juegos            @relation(fields: [id_juego], references: [id], onDelete: Cascade)
  ganador_jugador_juego Jugadores_Juegos? @relation(fields: [id_ganador_jugador_juego], references: [id], onDelete: Cascade)

  id_juego                 Int
  id_ganador_jugador_juego Int?

  estado_turno      EstadoTurnos @default(TiempoOfertas)
  fecha_turno       DateTime?    @default(now())
  fecha_inicio_puja DateTime     @default(now())
  tiempo_puja_seg   Int          @default(120)
  nro_turno         Int          @default(1)
  // El saldo restante es el monto_base_de_cada_turno * cantidad_turnos_restantes (incluido el actual) 
  saldo_restante    Int          @default(0)
  // Es el 8% del saldo restante
  monto_minimo_puja Int          @default(0)

  jugador_grupo_turno Jugador_Grupo_Turno[]
}

model Jugadores {
  id          Int @id @default(autoincrement())
  id_invitado Int @unique

  invitado Invitados @relation(fields: [id_invitado], references: [id], onDelete: NoAction)

  jugadores_juegos Jugadores_Juegos[]

  nombre       String
  usuario      String @unique
  contrasena   String
  client_token String @default("")
}

enum Roles {
  Creador
  Jugador
}

enum Estado_Jugadores_Juego {
  Participando
  RetiroForzoso
  RetiroVoluntario
}

model Jugadores_Juegos {
  id Int @id @default(autoincrement())

  jugador Jugadores              @relation(fields: [id_jugador], references: [id], onDelete: Cascade)
  juego   Juegos                 @relation(fields: [id_juego], references: [id], onDelete: Cascade)
  rol     Roles                  @default(Jugador)
  estado  Estado_Jugadores_Juego @default(Participando)

  id_jugador Int
  id_juego   Int

  fecha_ingreso DateTime? @default(now())

  jugador_grupo_turno Jugador_Grupo_Turno[]
  Turnos              Turnos[]
}

model Jugador_Grupo_Turno {
  jugadores_juegos Jugadores_Juegos @relation(fields: [id_jugador_juego], references: [id], onDelete: NoAction)
  turno            Turnos           @relation(fields: [id_turno], references: [id], onDelete: Cascade)

  monto_puja Int
  fecha      DateTime @default(now()) @db.Date

  id_jugador_juego Int
  id_turno         Int

  @@id(name: "id", [id_jugador_juego, id_turno])
}
